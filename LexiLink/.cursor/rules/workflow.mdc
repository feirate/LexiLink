---
description:
globs:
alwaysApply: false
---
# LexiLink 开发工作流规范

## 开发原则
1. 优先级顺序
   - MVP阶段: YAGNI > KISS > First Principles > SOLID > DRY
   - 迭代阶段: First Principles > SOLID > YAGNI > KISS > DRY

2. 代码质量
   - 可读性优于性能（性能不是瓶颈时）
   - 中英文注释结合（API英文，业务逻辑中文）
   - 防御式编程（空值检查，边界处理）
   - 渐进式优化（先实现，后优化）

## 开发流程
1. 需求分析
   - 明确核心功能
   - 定义验收标准
   - 评估技术可行性
   - 制定开发计划

2. 设计阶段
   - 系统架构设计
   - 数据结构设计
   - UI/UX设计
   - API接口设计

3. 开发阶段
   - 遵循编码规范
   - 单元测试驱动
   - 定期代码审查
   - 持续集成部署

4. 测试阶段
   - 单元测试
   - 集成测试
   - 性能测试
   - 用户测试

## 版本控制
1. 分支策略
   ```
   main --------- 生产环境
      ↑
   develop ------ 开发主分支
      ↑
   feature/xxx -- 功能分支
   ```

2. 提交规范
   ```
   feat: 添加新功能
   fix: 修复bug
   docs: 文档更新
   style: 代码格式
   refactor: 重构
   test: 测试相关
   chore: 构建/依赖
   ```

## 自动化流程
1. 提交前检查
   - 代码格式化
   - 语法检查
   - 单元测试
   - 性能检测

2. 自动化部署
   - 开发环境
   - 测试环境
   - 生产环境

## 问题跟踪
1. Issue 模板
   ```
   标题: [类型] 简短描述
   描述:
   - 问题现象
   - 复现步骤
   - 期望结果
   - 实际结果
   ```

2. PR 模板
   ```
   标题: [模块] 功能描述
   内容:
   - 实现功能
   - 测试用例
   - 相关文档
   - 破坏性改动
   ```

## 文档维护
1. 代码文档
   - API文档
   - 使用示例
   - 架构说明
   - 部署指南

2. 项目文档
   - 需求文档
   - 设计文档
   - 测试文档
   - 用户手册

## 代码审查
1. 审查重点
   - 代码规范
   - 业务逻辑
   - 性能影响
   - 安全隐患

2. 审查流程
   - 提交PR
   - 指定审查人
   - 修改反馈
   - 合并代码

## 发布流程
1. 发布准备
   - 版本号更新
   - 更新日志
   - 测试验证
   - 文档更新

2. 发布步骤
   - 创建发布分支
   - 执行测试
   - 生成构建
   - 部署上线

## 质量保证
1. 代码质量
   - 测试覆盖率 > 80%
   - 代码重复率 < 5%
   - 圈复杂度 < 15
   - 文档完整性

2. 性能指标
   - 加载时间 < 3s
   - 内存占用 < 200MB
   - 帧率 > 60fps
   - 响应时间 < 100ms

## 团队协作
1. 沟通渠道
   - 代码评审
   - 技术讨论
   - 进度同步
   - 问题反馈

2. 知识共享
   - 技术文档
   - 最佳实践
   - 经验总结
   - 培训资料
