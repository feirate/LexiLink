---
description: 
globs: 
alwaysApply: true
---
# LexiLink Coding Standards

## Core Principles
- Follow YAGNI (You Aren't Gonna Need It) and KISS (Keep It Simple, Stupid) principles
- Prioritize code readability and maintainability
- Handle errors gracefully and provide meaningful error messages
- Document all public APIs and complex logic

## File Organization
- Core managers: [scripts/core/game_manager.gd](mdc:scripts/core/game_manager.gd), [scripts/core/data_manager.gd](mdc:scripts/core/data_manager.gd), [scripts/core/audio_manager.gd](mdc:scripts/core/audio_manager.gd)
- Game scenes: Store in `scenes/` directory with appropriate subdirectories
- Scripts: Organize in `scripts/` with clear module separation
- Assets: Place in `assets/` with proper categorization (audio, textures, fonts)
- Tests: Maintain in `tests/` with separate unit and integration directories

## Naming Conventions
1. Files and Directories
   - Use snake_case for all file and directory names
   - Script files: `player_controller.gd`
   - Scene files: `main_menu.tscn`

2. GDScript Conventions
   - Variables: snake_case (e.g., `player_health`)
   - Functions: snake_case (e.g., `calculate_damage()`)
   - Classes: PascalCase (e.g., `PlayerController`)
   - Constants: SCREAMING_SNAKE_CASE (e.g., `MAX_HEALTH`)
   - Signals: snake_case, past tense (e.g., `health_changed`)

## Code Structure
1. Node Organization
   ```gdscript
   # Order of sections in script files
   class_name MyClass
   extends Node

   # 1. Signals
   signal health_changed(new_health)

   # 2. Constants
   const MAX_SPEED = 300

   # 3. Exported Variables
   @export var health: int = 100

   # 4. Private Variables
   var _current_speed: float = 0.0

   # 5. Lifecycle Methods
   func _ready():
       pass

   # 6. Public Methods
   func take_damage(amount: int) -> void:
       pass

   # 7. Private Methods
   func _calculate_movement() -> void:
       pass
   ```

2. Method Organization
   - Keep methods focused and single-purpose
   - Maximum method length: 50 lines
   - Use clear, descriptive names that indicate purpose

## Documentation
1. Script Header
   ```gdscript
   ## Script header template
   # @desc: Brief description of the script's purpose
   # @author: Developer name
   # @date: YYYY-MM-DD
   ```

2. Method Documentation
   ```gdscript
   ## Method documentation template
   # Calculates damage based on attack and defense values
   # @param attack_value: Base attack value
   # @param defense: Target's defense value
   # @return: Final damage amount
   func calculate_damage(attack_value: int, defense: int) -> int:
   ```

## Error Handling
1. Use built-in Godot error handling:
   ```gdscript
   if not is_valid_state():
       push_error("Invalid state in PlayerController")
       return
   ```

2. Signal errors appropriately:
   ```gdscript
   signal error_occurred(message)
   ```

## Performance Guidelines
1. Resource Loading
   - Preload static resources
   - Use load() for dynamic resources
   - Implement proper resource cleanup

2. Signal Usage
   - Prefer signals for loose coupling
   - Disconnect unused signals
   - Avoid signal spam

## Testing Standards
1. Unit Tests
   - Test one feature per test
   - Use descriptive test names
   - Follow AAA pattern (Arrange, Act, Assert)

2. Integration Tests
   - Test component interactions
   - Verify scene behavior
   - Test signal connections

## Version Control
1. Commit Messages
   - Use present tense
   - Start with action verb
   - Keep under 72 characters
   - Include issue/ticket reference

2. Branch Naming
   - feature/feature-name
   - bugfix/bug-description
   - hotfix/issue-description

## Automation
- Use [scripts/ci_cd/auto_commit.sh](mdc:scripts/ci_cd/auto_commit.sh) for automated commits
- Follow commit message templates
- Respect daily commit limits
- Handle merge conflicts appropriately

## Project Configuration
- Use consistent project settings
- Document any custom engine configurations
- Maintain export presets for all target platforms

## Asset Guidelines
1. Audio
   - Format: WAV for effects, OGG for music
   - Sample rate: 44.1kHz
   - Normalize levels appropriately

2. Textures
   - Use appropriate compression
   - Maintain power-of-two dimensions
   - Implement texture atlases where beneficial

## Security Practices
- Never commit sensitive data
- Use environment variables for keys
- Implement proper user data handling
- Follow GDPR guidelines where applicable
